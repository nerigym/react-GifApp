{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGe,SAASA,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,cAAgB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAkBjD,OACI,sBAAMC,SAXW,SAACC,GAChBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAgB,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMpB,SACG,uBACKO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,Y,mCCPnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVrB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAqB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IACnC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAMN,IACrB,kCAAMA,EAAN,WCFCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECDf,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAE/BqB,KAAM,GACNa,SAAS,IALyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAsBtC,OAdAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAK1B,CAAEpB,IAEEqB,EDnBuBK,CAAc1B,GAAhCa,EAF2B,EAEhCN,KAAYa,EAFoB,EAEpBA,QAEnB,OACI,qCACA,qBAAIJ,UAAU,oCAAd,cAAqDhB,EAArD,OACEoB,GAAW,mBAAGJ,UAAU,mCAAb,uBACb,qBAAKA,UAAU,YAAf,SAEKH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAESA,GADGA,EAAIC,aEsBjBgB,EAlCM,WAAO,IAAD,EAGUzC,mBAAS,CAAC,gBAHpB,mBAGnB0C,EAHmB,KAGP3C,EAHO,KAYzB,OACI,qCACA,+CACA,cAACD,EAAD,CAAaC,cAAiBA,IAC9B,uBAGA,6BAEO2C,EAAWnB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEGA,SAAWA,GADLA,YCfT6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.6df2cf6b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport default function AddCategory({setCategories}) {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = (e) => {\n          e.preventDefault();\n\n          if( inputValue.trim().length > 2){\n              setCategories ( cat => [inputValue, ...cat]);\n              setInputValue('');\n          }\n          \n    }\n\n    return (\n        <form onSubmit= { handleSubmit }>\n           <input \n                type=\"text\"\n                value={ inputValue }\n                onChange= { handleInputChange }\n           />\n        </form>      \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n   }\n","\nexport const getGifs = async( category ) =>{\n    \n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=2zAZ6eP6CDeNS85rHC65JnCn8cUS9bdZ`;\n    const resp = await fetch( url );\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n      return{\n          id: img.id,\n          title: img.title,\n          url: img.images?.downsized_medium.url\n      }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {id,title,url} ) => {\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={url} alt={ title} />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n\n    const {data:images,loading} = useFetchGifs( category );\n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n        { loading && <p className=\"animate__animated animate__flash\"> Loading </p> }\n        <div className=\"card-grid\">       \n            {\n             images.map( img => (\n                <GifGridItem \n                    key = { img.id }\n                    {... img } \n                />\n              ))\n\n            }\n            \n        </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });\n\n            })\n\n    }, [ category ])\n\n    return state //{ data:[], loading: true };\n\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n\n const [categories, setCategories] = useState(['Dragon Ball']);\n\n /*const handleAdd = () => {\n   //forma mas directa\n  //setCategories( [...categories,'Super Campeones']);\n  //callback\n  setCategories ( cat => [...cat, 'Super Campeones']);\n }*/\n\n  return (\n      <>\n      <h2> GifExpertApp</h2>\n      <AddCategory setCategories= { setCategories }/>\n      <hr />\n\n     \n      <ol>          \n           {  \n             categories.map( category => (\n               <GifGrid\n                  key={ category }\n                  category={ category } \n               />\n             ))\n           }\n      </ol>\n   \n      </>\n  )\n}\n\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}